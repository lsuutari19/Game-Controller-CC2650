
//nyt toimii myState = MENU, napin painalluksella pääsee ottamaan dataa ja musiikki soi
// ongelmana ettei musiikki stoppaa ja muutenki menee sekaisin toisesta napin painalluksesta

#include <stdio.h>
#include <string.h>

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/drivers/I2C.h>
#include <ti/drivers/i2c/I2CCC26XX.h>
#include <ti/drivers/PIN.h>
#include <ti/drivers/pin/PINCC26XX.h>
#include <ti/mw/display/Display.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
#include <ti/drivers/pin/PINCC26XX.h>
#include <driverlib/timer.h>
#include <buzzer.h>



/* Board Header files */
#include "Board.h"
#include "sensors/mpu9250.h"


#define STACKSIZE 2048
Char taskStack[STACKSIZE];
Char musicStack[STACKSIZE];

/*music play*/
#define _BUZZER_H_
#define BUZZER_FREQ_MIN            3
#define BUZZER_FREQ_MAX            8000
#define C4  262   //Defining note frequency
#define D4  294
#define E4  330
#define F4  349
#define G4  392
#define A4  440
#define B4  494
#define C5  523
#define D5  587
#define E5  659
#define F5  698
#define G5  784
#define A5  880
#define B5  988

// MPU GLOBAL VARIABLES

static PIN_Handle hMpuPin;
static PIN_State MpuPinState;
static PIN_Config MpuPinConfig[] = {
    Board_MPU_POWER  | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};

// Virtanappi

static PIN_Handle buttonHandle;
static PIN_State buttonState;
PIN_Config buttonConfig[] = {
   Board_BUTTON0  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE, // Hox! TAI-operaatio
   PIN_TERMINATE // Määritys lopetetaan aina tähän vakioon
};

//Buzzer
static PIN_Handle hBuzzer;
static PIN_State sBuzzer;
PIN_Config cBuzzer[] = {
  Board_BUZZER | PIN_GPIO_OUTPUT_EN,
  PIN_TERMINATE
};



// Käsittelijäfunktio

// buzzer GLOBAL VARIABLES


// display handle setup
Display_Handle displayHandle;


// MPU USES ITS OWN I2C INTERFACE

static const I2CCC26XX_I2CPinCfg i2cMPUCfg = {
    .pinSDA = Board_I2C0_SDA1,
    .pinSCL = Board_I2C0_SCL1
};


// Tilaesittelyt
enum state { WAIT=1, DOWN, UP, LEFT, RIGHT, MENU};
enum state myState = MENU;
/*
Void clkFxn(UArg arg0) {

    // Muutetaan tilaa halutuksi
    // Hox! If-lauseella tarkistetaan, että tilasiirto on mahdollinen!!
    // Nyt sallitaan vain tilasiirtymä IDLE -> READ_SENSOR
    if (myState == WAIT) {

        // Tilasiirtymä IDLE -> READ_SENSOR
        myState = READ_SENSOR;
    }
}
 */

// Anturien käsittely
Void displayTask(UArg arg0, UArg arg1) {

    if (myState == DOWN) {
        Display_print0(displayHandle, 5, 5, "DOWN");
        System_printf("DOWN \n");
        System_flush();
        myState = WAIT;
    } else if (myState == UP) {

		Display_print0(displayHandle, 5, 5, "UP");
		System_printf("UP \n");
		System_flush();
		myState = WAIT;

    } else if (myState == RIGHT) {

		Display_print0(displayHandle, 5, 5, "RIGHT");
		System_printf("RIGHT \n");
		System_flush();
		myState = WAIT;

    } else if (myState == LEFT) {

		Display_print0(displayHandle, 5, 5, "LEFT");
		System_printf("LEFT \n");
		System_flush();
		myState = WAIT;

        }
	Task_sleep(1000000 / Clock_tickPeriod);
    Display_clear(displayHandle);
}

Void musicTask() {

	while (1) {
	if(myState == WAIT) {
    buzzerOpen(hBuzzer);
	buzzerSetFrequency(E4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(375000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);



	buzzerSetFrequency(E4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(375000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);



	buzzerSetFrequency(E4); //E4
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(E5); //E5
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(F5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(F5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(E5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(E5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);



	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(D5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(E5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(375000 / Clock_tickPeriod);



	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);



	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(375000 / Clock_tickPeriod);



	buzzerSetFrequency(E4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(375000 / Clock_tickPeriod);



	buzzerSetFrequency(E4); //E4
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(G4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(E5); //E5
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(F5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(F5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(E5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(D5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(E5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);



	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(D5);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(E5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(250000 / Clock_tickPeriod);

	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(250000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(125000 / Clock_tickPeriod);

	buzzerSetFrequency(C5);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(A4);
	Task_sleep(125000 / Clock_tickPeriod);
	buzzerSetFrequency(B4);
	Task_sleep(375000 / Clock_tickPeriod);

	//JÄÄTIIN END OF REPEATTIIN ELI SEURAAVAKSI TULIS SE LOPUN NOLLAHIRVITYS

	}
	}
Task_sleep(100000 / Clock_tickPeriod);

}

// SENSOR TASK
Void sensorFxn(UArg arg0, UArg arg1) {

	float ax, ay, az, gx, gy, gz;
	Display_Params params; //näytön parametrit alustetaan näyttö
	Display_Params_init(&params);
	params.lineClearMode = DISPLAY_CLEAR_BOTH;

	displayHandle = Display_open(Display_Type_LCD, &params);
	I2C_Handle i2cMPU; // INTERFACE FOR MPU9250 SENSOR
	I2C_Params i2cMPUParams;
    I2C_Params_init(&i2cMPUParams);
    i2cMPUParams.bitRate = I2C_400kHz;
    i2cMPUParams.custom = (uintptr_t)&i2cMPUCfg;

    // MPU OPEN I2C
    i2cMPU = I2C_open(Board_I2C, &i2cMPUParams);
    if (i2cMPU == NULL) {
        System_abort("Error Initializing I2CMPU\n");
    }

    // *******************************
    //
    // MPU POWER ON
    //
    // *******************************
    PIN_setOutputValue(hMpuPin,Board_MPU_POWER, Board_MPU_POWER_ON);

    // WAIT 100MS FOR THE SENSOR TO POWER UP
	Task_sleep(100000 / Clock_tickPeriod);
    System_printf("MPU9250: Power ON\n");
    System_flush();

    // *******************************
    //
    // MPU9250 SETUP
    //
    // *******************************
	System_printf("MPU9250: Setup and calibration...\n");
	System_flush();

	mpu9250_setup(&i2cMPU);

	System_printf("MPU9250: Setup and calibration OK\n");
	System_flush();

    // *******************************
    //
    // MPU CLOSE I2C
    //
    // *******************************
    I2C_close(i2cMPU);


	while (1) {
		if(myState == WAIT) {
			i2cMPU = I2C_open(Board_I2C, &i2cMPUParams);
			if (i2cMPU == NULL) {
				System_abort("Error Initializing I2CMPU\n");
			}

			mpu9250_get_data(&i2cMPU, &ax, &ay, &az, &gx, &gy, &gz);
			if(gx < -75)
			{
				myState = DOWN;
				displayTask(arg0, arg1);
			} else if (gx > 75)
			{
				myState = UP;
				displayTask(arg0, arg1);
			} else if (gy < -75)
			{
				myState = LEFT;
				displayTask(arg0, arg1);
			} else if (gy > 75)
			{
				myState = RIGHT;
				displayTask(arg0, arg1);
			}
			myState = WAIT;
			I2C_close(i2cMPU);
	    // WAIT 1s

	}
	Task_sleep(100000 / Clock_tickPeriod);
    }
 //   PIN_setOutputValue(hMpuPin,Board_MPU_POWER, Board_MPU_POWER_OFF);
}

void buttonFxn(PIN_Handle handle, PIN_Id pinId) {
	if(myState == WAIT)
	{
	    myState = MENU;
    } else if(myState == MENU)
    {
    	myState = WAIT;

    }
}
int main(void) {

	Task_Handle task;
	Task_Params taskParams;
	Task_Handle mtask;
	Task_Params musicParams;
    Board_initGeneral();
    Board_initI2C();

     hBuzzer = PIN_open(&sBuzzer, cBuzzer);
     if (hBuzzer == NULL) {
        System_abort("Pin open failed!");
     }
    buttonHandle = PIN_open(&buttonState, buttonConfig);

    // OPEN MPU POWER PIN
    hMpuPin = PIN_open(&MpuPinState, MpuPinConfig);
    if (hMpuPin == NULL) {
    	System_abort("Pin open failed!");
    }
    if (PIN_registerIntCb(buttonHandle, &buttonFxn) != 0) {
       System_abort("Error registering button callback function");
    }
    Task_Params_init(&taskParams);
    taskParams.stackSize = STACKSIZE;
    taskParams.stack = &taskStack;
    task = Task_create((Task_FuncPtr)sensorFxn, &taskParams, NULL);
    if (task == NULL) {
    	System_abort("Task create failed!");
    }

    //määritellään music taski
    Task_Params_init(&musicParams);
    taskParams.stackSize = STACKSIZE;
    taskParams.stack = &musicStack;
    mtask = Task_create((Task_FuncPtr)musicTask, &musicParams, NULL);
    if (mtask == NULL) {
        System_abort("Music task create failed!");
    }
    /* Start BIOS */
    BIOS_start();

    return (0);
}
